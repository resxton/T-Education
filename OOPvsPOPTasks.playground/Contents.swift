import UIKit

/*:
 - –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å ```GameCharacter```:
 
 ¬†¬†¬†    **–°–≤–æ–π—Å—Ç–≤–∞:** ```name``` (```String```), ```health``` (```Int```), ```level``` (```Int```).
 
 ¬†¬†¬†    **–ú–µ—Ç–æ–¥—ã:** takeDamage(amount: Int), heal(amount: Int), levelUp().

 - –°–æ–∑–¥–∞–π—Ç–µ –î–í–ê –ø–æ–¥–∫–ª–∞—Å—Å–∞ –æ—Ç ```GameCharacter``` (–Ω–∞ –≤—ã–±–æ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, ```Warrior```, ```Mage```, ```Archer``` –∏–ª–∏ —Å–≤–æ–∏):
    
    **–î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∫–ª–∞—Å—Å–∞:**
    
    1-2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ```strength```, ```magicPower```, ```agility```).
    
    1¬†—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π¬†–º–µ—Ç–æ–¥¬†–∞—Ç–∞–∫–∏¬†(–Ω–∞–ø—Ä–∏–º–µ—Ä, ```attack(target:)```, ```castSpell(spellName: target:)```, ```shootArrow(target:))```.
    
    –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–µ—Ç–æ–¥ –∞—Ç–∞–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏.

 - –°–æ–∑–¥–∞–π—Ç–µ 1 –∏–ª–∏ 2 –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π (–Ω–∞ –≤—ã–±–æ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, ```Flyable```, ```Healable``` –∏–ª–∏ —Å–≤–æ–∏):
    
    **–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å:**
    
    1 —Å–≤–æ–π—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ```flightSpeed```),
    
    1 –º–µ—Ç–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ```fly()```).
    
    –°–¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫, —á—Ç–æ–±—ã 1 –∏–ª–∏ –æ–±–∞ –≤–∞—à–∏—Ö –ø–æ–¥–∫–ª–∞—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —ç—Ç–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º.

 - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∞ ```GameCharacter```:
    
    –î–æ–±–∞–≤—å—Ç–µ –≤—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ ```isAlive (Bool, health > 0)```.
    
    –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ ```printCharacterInfo()``` –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –≤ –∫–æ–Ω—Å–æ–ª—å.

 - –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã:
    
    –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤.
    
    –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: –∞—Ç–∞–∫–∏, –ª–µ—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å), –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ```printCharacterInfo()``` –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö.

 ### –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è "–¥–ª—è –≥–µ—Ä–æ–µ–≤":
    
    –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª ```Item``` –∏ 2 —Ç–∏–ø–∞ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å - —É–ø—Ä–æ—â–µ–Ω–Ω–æ).
    
    –ö—Ä–∞—Ç–∫–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∫–æ–¥ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID (SRP –∏ OCP).

 ## –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:
 1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ (2 –±–∞–ª–ª–∞)
 
 +2: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –∫–ª–∞—Å—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å–ª–µ–¥—É—é—Ç ```GameCharacter```. –ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
 
 -1: –ï—Å–ª–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∏–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
 
 -1: –ï—Å–ª–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –û–û–ü.
 
 2. –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∏ –ª–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (1 –±–∞–ª–ª–∞)
 
 +1: –ö–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è, –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –º–æ–≥—É—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å, –ª–µ—á–∏—Ç—å—Å—è, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.
 
 -1: –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞ –∞—Ç–∞–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ö–∞–Ω–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∞.
 
 -1: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã (–Ω–µ —Å–æ–∑–¥–∞–Ω—ã —ç–∫–∑–µ–º–ø–ª—è—Ä—ã, –Ω–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π).
 
 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π (1 –±–∞–ª–ª)
 
 +1:¬†–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è¬†extension¬†–¥–ª—è¬†```isAlive```¬†–∏¬†```printCharacterInfo()```.
 
 -0.5: –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
 
 4. –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ (2 –±–∞–ª–ª–∞)
 
 +2: –ö–æ–¥ —á–∏—Å—Ç—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
 
 -1: –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞, –∫–æ–¥ –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π.
 
 -1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ "–º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∏—Å–µ–ª" –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç.

 5. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID (SRP, OCP) (2 –±–∞–ª–ª–∞)
 
 +2: –ü—Ä–∏–Ω—Ü–∏–ø—ã SRP –∏ OCP —Å–æ–±–ª—é–¥–µ–Ω—ã (—Ä–∞–∑–Ω—ã–µ –∫–ª–∞—Å—Å—ã –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –æ–¥–Ω—É –∑–∞–¥–∞—á—É, –∫–æ–¥ —Ä–∞—Å—à–∏—Ä—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞).
 
 -1: –ï—Å–ª–∏ –∫–ª–∞—Å—Å ```GameCharacter``` –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è).
 
 -1: –ï—Å–ª–∏ –∫–æ–¥ —Å–ª–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞).
 
 6. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ (1 –±–∞–ª–ª)
 
 +1: –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã (—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª Item), –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.
 
 -0.5: –ü—Ä–æ—Ç–æ–∫–æ–ª ```Item``` —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –Ω–æ –ª–æ–≥–∏–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
 
 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (1 –±–∞–ª–ª)
 
 +1: –ö–æ–¥ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω (–µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π).
 
 -0.5: –ù–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –≤ –∫–æ–¥–µ.
 */
// –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å GameCharacter:
//¬† –°–≤–æ–π—Å—Ç–≤–∞: name (String), health (Int), level (Int).
//  –ú–µ—Ç–æ–¥—ã: takeDamage(amount: Int), heal(amount: Int), levelUp().


class GameCharacter {
    // MARK: - Public Properties
    var name: String
    var inventory: [Item] = []
    
    // MARK: - Private Properties
    private var health: Int {
        didSet {
            if oldValue <= health {
                print("‚ù§Ô∏è‚Äçü©π Healing completed to \(name): \(oldValue) -> \(health)")
            } else {
                print("üí• Damage dealt to \(name): \(oldValue) -> \(health)")
            }
        }
    }
    private var level: Int {
        didSet {
            print("‚¨ÜÔ∏è \(name) leveled up: \(oldValue) -> \(level)")
        }
    }
    
    // MARK: - Initializers
    init(name: String, health: Int = 10, level: Int = 1) {
        self.name = name
        self.health = health
        self.level = level
    }
    
    // MARK: - Public Methods
    func takeDamage(amount: Int) {
        guard health > 0 else {
            print("üö´ What's dead can't die.")
            return
        }
        
        guard amount < health else {
            health = 0
            print("üíÄ \(name) was killed")
            return
        }
        
        guard amount >= 0 else {
            print("üö´ Negative damage impossible")
            return
        }
        
        health -= amount
    }
    
    func heal(amount: Int) {
        guard amount >= 0 else {
            print("üö´ Negative healing impossible")
            return
        }
        
        health += amount
    }
    
    func levelUp() {
        level += 1
    }
    
    func basicAttack(target: GameCharacter) {
        guard isAlive else {
            print("üö´ \(name) is dead, cant attack")
            return
        }

        target.takeDamage(amount: self.level)
        print("‚öîÔ∏è Attacked \(target) with basic attack")
    }
}

extension GameCharacter: CustomStringConvertible {
    var description: String {
        return isAlive ? "character with \(name), health \(health), level \(level)" : "character with name \(name), health \(health), level \(level)"
    }
}

//  –°–æ–∑–¥–∞–π—Ç–µ –î–í–ê –ø–æ–¥–∫–ª–∞—Å—Å–∞ –æ—Ç GameCharacter (–Ω–∞ –≤—ã–±–æ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, Warrior, Mage, Archer –∏–ª–∏ —Å–≤–æ–∏):
//      –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∫–ª–∞—Å—Å–∞:
//          1-2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, strength, magicPower, agility).
//          1¬†—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π¬†–º–µ—Ç–æ–¥¬†–∞—Ç–∞–∫–∏¬†(–Ω–∞–ø—Ä–∏–º–µ—Ä, attack(target:), castSpell(spellName: target:), shootArrow(target:)).
//          –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –º–µ—Ç–æ–¥ –∞—Ç–∞–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏.

class Wizard: GameCharacter {
    // MARK: - Public Properties
    var intelligence: Int
    
    // MARK: - Private Properties
    private var mana: Int {
        didSet {
            print("‚ÑπÔ∏è Mana stealed from \(name): \(oldValue) -> \(mana)")
        }
    }
    
    // MARK: - Initializers
    init(name: String, health: Int = 10, level: Int = 1, mana: Int = 10, intelligence: Int = 10) {
        self.mana = mana
        self.intelligence = intelligence
        
        super.init(name: name, health: health, level: level)
    }
    
    // MARK: - Overrides
    override func basicAttack(target: GameCharacter) {
        guard isAlive else {
            print("üö´ \(name) is dead, cant attack")
            return
        }
        
        if intelligence > 1000 {
            target.takeDamage(amount: Int.max)
            print("üîÆ \(name) attacked \(target) with a zoltraak")
        } else {
            target.takeDamage(amount: self.intelligence)
            print("üí´ \(name) attacked \(target) with a ordinary spell")
        }
    }
    
    // MARK: - Public Methods
    func castFireball(target: GameCharacter, with radius: Int, with temperature: Int = 1000) {
        guard isAlive else {
            print("üö´ \(name) is dead, cant attack")
            return
        }

        target.takeDamage(amount: radius * radius * temperature / 1000)
        print("üî• \(name) attacked \(target) with a fireball of radius \(radius) m with temperature \(temperature)¬∞C")
    }
    
    func manaLeak(amount: Int) {
        guard amount < mana else {
            mana = 0
            return
        }
        
        guard amount > 0 else {
            print("üö´ Mana leak cant be negative")
            return
        }
        
        mana -= amount
    }
}

class AntiMage: GameCharacter {
    // MARK: - Public Properties
    var radianceOwner: Bool
    
    // MARK: - Private Properties
    private var agility: Int
    
    // MARK: - Initializers
    init(name: String, health: Int = 10, level: Int = 1, agility: Int = 10, radianceOwner: Bool = true) {
        self.agility = agility
        self.radianceOwner = radianceOwner
        
        super.init(name: name, health: health, level: level)
    }
    
    // MARK: - Overrides
    override func basicAttack(target: GameCharacter) {
        guard isAlive else {
            print("üö´ \(name) is dead, cant attack")
            return
        }

        target.takeDamage(amount: 1)
        radianceOwner ? print("üó°Ô∏è \(name) attacked \(target) with radiance") : print("üó°Ô∏è \(name) attacked \(target) without radiance")
    }
    
    // MARK: - Public Methods
    func castCounterspell(target: GameCharacter, with radius: Int, willTake manaAmount: Int) {
        guard isAlive else {
            print("üö´ \(name) is dead, cant attack")
            return
        }

        if let wizardTarget = target as? Wizard {
            wizardTarget.manaLeak(amount: manaAmount)
            print("üåÄ \(name) attacked \(target) within \(radius) m and take \(manaAmount) mana from them")
        } else {
            target.takeDamage(amount: 0)
            print("üö´ There is no mana to take")
        }
    }
}

// –°–æ–∑–¥–∞–π—Ç–µ 1 –∏–ª–∏ 2 –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π (–Ω–∞ –≤—ã–±–æ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, Flyable, Healable –∏–ª–∏ —Å–≤–æ–∏):
//¬†–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å:
//  1 —Å–≤–æ–π—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, flightSpeed),
//  1 –º–µ—Ç–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, fly()).
//  –°–¥–µ–ª–∞–π—Ç–µ —Ç–∞–∫, —á—Ç–æ–±—ã 1 –∏–ª–∏ –æ–±–∞ –≤–∞—à–∏—Ö –ø–æ–¥–∫–ª–∞—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —ç—Ç–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º.

protocol Intelligent {
    var intelligence: Int { get set }
    func diplomaticConflictResolution(target: GameCharacter)
}

protocol NotSoIntelligent {
    var radianceOwner: Bool { get set }
    func buyRadiance()
}

extension Wizard: Intelligent {
    func diplomaticConflictResolution(target: GameCharacter) {
        guard isAlive else {
            print("üö´ \(name) is dead, cant attack")
            return
        }

        if !target.isAlive {
            target.heal(amount: 1)
        }
        
        print("üïäÔ∏è Resolved the conflict with \(target) without a fight")
    }
}

extension AntiMage: NotSoIntelligent {
    func buyRadiance() {
        guard isAlive else {
            print("üö´ \(name) is dead, cant buy radiance")
            return
        }

        self.radianceOwner = true
        print("Oh, it's a good thing my team doesn't know...")
    }
}

//  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∞ GameCharacter:
//  –î–æ–±–∞–≤—å—Ç–µ –≤—ã—á–∏—Å–ª—è–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ isAlive (Bool, health > 0).
//  –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ printCharacterInfo() –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –≤ –∫–æ–Ω—Å–æ–ª—å.

extension GameCharacter {
    var isAlive: Bool {
        health > 0 ? true : false
    }
    
    func printCharacterInfo() {
        isAlive ? print("‚ÑπÔ∏è Alive character with name \(name), health \(health), level \(level)") : print("‚ÑπÔ∏è Dead character with name \(name), health \(health), level \(level)")
    }
}

//    –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª Item –∏ 2 —Ç–∏–ø–∞ –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å - —É–ø—Ä–æ—â–µ–Ω–Ω–æ).
//    –ö—Ä–∞—Ç–∫–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∫–æ–¥ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID (SRP –∏ OCP).

protocol Item {
    var id: UUID { get set }
    var weight: Int { get set }
    var durability: Int { get set }
    func fix()
    func shatter()
}

class Crosier {
    var id: UUID
    var weight: Int
    var durability: Int {
        didSet {
            if oldValue > durability {
                print("‚ÑπÔ∏è Shattered crosier: \(oldValue) -> \(durability)")
            } else {
                print("‚ÑπÔ∏è Fixed crosier: \(oldValue) -> \(durability)")
            }
        }
    }
    var manaBonus: Int
    
    init(weight: Int, durability: Int, manaBonus: Int) {
        self.id = UUID()
        self.weight = weight
        self.durability = durability
        self.manaBonus = manaBonus
    }
    
    func blessingFromTheHighMagician() {
        manaBonus += 10000
    }
}

extension Crosier: Item {
    func fix() {
        print("‚ú® fixing crosier")
        durability += 1
    }
    
    func shatter() {
        guard durability > 0 else {
            print("üö´ Crosier is already broken")
            return
        }
        
        print("üí• shattering")
        
        guard durability > 1 else {
            durability = 0
            print("üí• Crosier was broken")
            return
        }
        
        durability -= 1
    }
}

extension Crosier: CustomStringConvertible {
    var description: String {
        "‚ÑπÔ∏è Crosier with weight \(weight), durability \(durability) and mana bonus \(manaBonus)"
    }
}

class Radiance {
    var id: UUID
    var weight: Int
    var durability: Int {
        didSet {
            if oldValue > durability {
                print("‚ÑπÔ∏è Shattered radiance: \(oldValue) -> \(durability)")
            } else {
                print("‚ÑπÔ∏è Fixed radiance: \(oldValue) -> \(durability)")
            }
        }
    }
    var skillBonus: Int
    
    init(weight: Int, durability: Int, skillBonus: Int) {
        self.id = UUID()
        self.weight = weight
        self.durability = durability
        self.skillBonus = skillBonus
    }
    
    func blessingFromSerega() {
        skillBonus -= 10000
    }
}

extension Radiance: Item {
    func fix() {
        print("‚ú® fixing radiance")
        durability += 1
    }
    
    func shatter() {
        guard durability > 0 else {
            print("üö´ Radiance is already broken")
            return
        }
        
        print("üí• shattering")
        
        guard durability > 1 else {
            durability = 0
            print("üí• Radiance was broken")
            return
        }
        
        durability -= 1
    }
}

extension Radiance: CustomStringConvertible {
    var description: String {
        "‚ÑπÔ∏è Radiance with weight \(weight), durability \(durability) and skill bonus \(skillBonus)"
    }
}

protocol InventoryHolder {
    var inventory: [Item] { get set }
    func addItem(_ item: Item)
    func removeItem(_ item: Item)
}

extension GameCharacter: InventoryHolder {
    func addItem(_ item: Item) {
        inventory.append(item)
        print("ü´¥ \(name) got \(item)")
    }
    
    func removeItem(_ item: Item) {
        inventory.removeAll { $0.id == item.id }
        print("ü´≥ \(name) discarded \(item)")
    }
}

//  –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã:
//  –°–æ–∑–¥–∞–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤.
//  –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: –∞—Ç–∞–∫–∏, –ª–µ—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å), –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è.
//  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ printCharacterInfo() –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö.

let basicCharacter = GameCharacter(name: "TPaBoMaH", health: 1)
let frieren = Wizard(name: "Frieren", health: 1000000, level: Int.max - 1, mana: Int.max - 1, intelligence: Int.max - 1)
let seregaPirat = AntiMage(name: "Serega Pirat", health: 200, level: 2, agility: 11)

print("1. Leveling testing")
basicCharacter.levelUp()
frieren.levelUp()
seregaPirat.levelUp()

print("\n2. Fighting and interaction testing")
basicCharacter.basicAttack(target: seregaPirat)
seregaPirat.basicAttack(target: basicCharacter)
basicCharacter.printCharacterInfo()

seregaPirat.basicAttack(target: frieren)
seregaPirat.castCounterspell(target: frieren, with: 10, willTake: 10000)
seregaPirat.printCharacterInfo()

print("\n3. Other stuff testing")
frieren.diplomaticConflictResolution(target: seregaPirat)
frieren.heal(amount: 250)
frieren.printCharacterInfo()

let punchBag = GameCharacter(name: "PunchBag", health: Int.max)
frieren.basicAttack(target: punchBag)


print("\n4. Inventory testing")
let greatCrosier = Crosier(weight: 1, durability: 100000, manaBonus: 10000)
greatCrosier.blessingFromTheHighMagician()
greatCrosier.shatter()
greatCrosier.fix()

let signature = Radiance(weight: 1000, durability: 20, skillBonus: 1)
let secondSignature = Radiance(weight: 100, durability: 20, skillBonus: 1)
signature.blessingFromSerega()

frieren.addItem(greatCrosier)
seregaPirat.addItem(signature)

seregaPirat.addItem(secondSignature)
seregaPirat.removeItem(secondSignature)
